# Copyright (c) 2025, Frappe Technologies Pvt. Ltd. and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.utils import flt, getdate, add_days, add_months
import json


@frappe.whitelist()
def get_site_visit_analytics(from_date=None, to_date=None, sales_person=None, territory=None):\n    \"\"\"Get comprehensive site visit analytics\"\"\"\n    \n    if not from_date:\n        from_date = add_months(getdate(), -3)\n    if not to_date:\n        to_date = getdate()\n    \n    filters = {\n        'visit_date': ['between', [from_date, to_date]],\n        'docstatus': ['!=', 2]\n    }\n    \n    if sales_person:\n        filters['sales_person'] = sales_person\n    \n    # Get all visits data\n    visits = frappe.get_all(\n        'CRM Site Visit',\n        filters=filters,\n        fields=[\n            'name', 'visit_date', 'sales_person', 'status', 'visit_type',\n            'lead_quality', 'total_duration', 'potential_value', 'probability_percentage',\n            'reference_type', 'reference_name', 'city', 'check_in_time', 'check_out_time'\n        ]\n    )\n    \n    # Calculate key metrics\n    total_visits = len(visits)\n    completed_visits = len([v for v in visits if v.status == 'Completed'])\n    in_progress_visits = len([v for v in visits if v.status == 'In Progress'])\n    planned_visits = len([v for v in visits if v.status == 'Planned'])\n    cancelled_visits = len([v for v in visits if v.status == 'Cancelled'])\n    \n    # Calculate durations\n    total_duration = sum([v.total_duration or 0 for v in visits if v.total_duration])\n    avg_duration = total_duration / completed_visits if completed_visits > 0 else 0\n    \n    # Calculate conversion metrics\n    hot_leads = len([v for v in visits if v.lead_quality == 'Hot'])\n    warm_leads = len([v for v in visits if v.lead_quality == 'Warm'])\n    cold_leads = len([v for v in visits if v.lead_quality == 'Cold'])\n    \n    # Calculate potential value\n    total_potential_value = sum([v.potential_value or 0 for v in visits])\n    avg_potential_value = total_potential_value / total_visits if total_visits > 0 else 0\n    \n    # Sales person performance\n    sales_performance = {}\n    for visit in visits:\n        if visit.sales_person not in sales_performance:\n            sales_performance[visit.sales_person] = {\n                'total_visits': 0,\n                'completed_visits': 0,\n                'total_duration': 0,\n                'hot_leads': 0,\n                'potential_value': 0\n            }\n        \n        perf = sales_performance[visit.sales_person]\n        perf['total_visits'] += 1\n        if visit.status == 'Completed':\n            perf['completed_visits'] += 1\n        if visit.total_duration:\n            perf['total_duration'] += visit.total_duration\n        if visit.lead_quality == 'Hot':\n            perf['hot_leads'] += 1\n        if visit.potential_value:\n            perf['potential_value'] += visit.potential_value\n    \n    # Visit type analysis\n    visit_type_analysis = {}\n    for visit in visits:\n        if visit.visit_type not in visit_type_analysis:\n            visit_type_analysis[visit.visit_type] = {\n                'count': 0,\n                'completed': 0,\n                'hot_leads': 0,\n                'avg_duration': 0,\n                'total_duration': 0\n            }\n        \n        analysis = visit_type_analysis[visit.visit_type]\n        analysis['count'] += 1\n        if visit.status == 'Completed':\n            analysis['completed'] += 1\n            if visit.total_duration:\n                analysis['total_duration'] += visit.total_duration\n        if visit.lead_quality == 'Hot':\n            analysis['hot_leads'] += 1\n    \n    # Calculate average durations for visit types\n    for vtype, data in visit_type_analysis.items():\n        if data['completed'] > 0:\n            data['avg_duration'] = data['total_duration'] / data['completed']\n    \n    # Time-based analysis (weekly trends)\n    weekly_trends = get_weekly_trends(visits)\n    \n    # City-wise analysis\n    city_analysis = {}\n    for visit in visits:\n        city = visit.city or 'Unknown'\n        if city not in city_analysis:\n            city_analysis[city] = {\n                'count': 0,\n                'completed': 0,\n                'hot_leads': 0,\n                'potential_value': 0\n            }\n        \n        city_data = city_analysis[city]\n        city_data['count'] += 1\n        if visit.status == 'Completed':\n            city_data['completed'] += 1\n        if visit.lead_quality == 'Hot':\n            city_data['hot_leads'] += 1\n        if visit.potential_value:\n            city_data['potential_value'] += visit.potential_value\n    \n    return {\n        'summary': {\n            'total_visits': total_visits,\n            'completed_visits': completed_visits,\n            'in_progress_visits': in_progress_visits,\n            'planned_visits': planned_visits,\n            'cancelled_visits': cancelled_visits,\n            'completion_rate': (completed_visits / total_visits * 100) if total_visits > 0 else 0,\n            'total_duration_hours': total_duration / 3600,\n            'avg_duration_hours': avg_duration / 3600,\n            'hot_leads': hot_leads,\n            'warm_leads': warm_leads,\n            'cold_leads': cold_leads,\n            'total_potential_value': total_potential_value,\n            'avg_potential_value': avg_potential_value\n        },\n        'sales_performance': sales_performance,\n        'visit_type_analysis': visit_type_analysis,\n        'city_analysis': city_analysis,\n        'weekly_trends': weekly_trends\n    }\n\n\ndef get_weekly_trends(visits):\n    \"\"\"Get weekly trends for visits\"\"\"\n    weekly_data = {}\n    \n    for visit in visits:\n        # Get week start date (Monday)\n        visit_date = getdate(visit.visit_date)\n        week_start = visit_date - frappe.utils.datetime.timedelta(days=visit_date.weekday())\n        week_key = week_start.strftime('%Y-%m-%d')\n        \n        if week_key not in weekly_data:\n            weekly_data[week_key] = {\n                'week_start': week_key,\n                'total_visits': 0,\n                'completed_visits': 0,\n                'hot_leads': 0,\n                'potential_value': 0\n            }\n        \n        week_data = weekly_data[week_key]\n        week_data['total_visits'] += 1\n        if visit.status == 'Completed':\n            week_data['completed_visits'] += 1\n        if visit.lead_quality == 'Hot':\n            week_data['hot_leads'] += 1\n        if visit.potential_value:\n            week_data['potential_value'] += visit.potential_value\n    \n    # Convert to sorted list\n    return sorted(weekly_data.values(), key=lambda x: x['week_start'])\n\n\n@frappe.whitelist()\ndef get_visit_heatmap_data(sales_person=None):\n    \"\"\"Get data for visit heatmap visualization\"\"\"\n    \n    # Get last 90 days of data\n    from_date = add_days(getdate(), -90)\n    to_date = getdate()\n    \n    filters = {\n        'visit_date': ['between', [from_date, to_date]],\n        'docstatus': ['!=', 2]\n    }\n    \n    if sales_person:\n        filters['sales_person'] = sales_person\n    \n    visits = frappe.get_all(\n        'CRM Site Visit',\n        filters=filters,\n        fields=['visit_date', 'status']\n    )\n    \n    # Create heatmap data\n    heatmap_data = {}\n    current_date = from_date\n    \n    while current_date <= to_date:\n        date_str = current_date.strftime('%Y-%m-%d')\n        heatmap_data[date_str] = {\n            'date': date_str,\n            'count': 0,\n            'completed': 0\n        }\n        current_date = add_days(current_date, 1)\n    \n    # Fill in actual data\n    for visit in visits:\n        date_str = visit.visit_date.strftime('%Y-%m-%d')\n        if date_str in heatmap_data:\n            heatmap_data[date_str]['count'] += 1\n            if visit.status == 'Completed':\n                heatmap_data[date_str]['completed'] += 1\n    \n    return list(heatmap_data.values())\n\n\n@frappe.whitelist()\ndef get_location_analytics():\n    \"\"\"Get location-based analytics for visits\"\"\"\n    \n    # Get visits with location data\n    visits = frappe.get_all(\n        'CRM Site Visit',\n        filters={\n            'check_in_latitude': ['!=', ''],\n            'check_in_longitude': ['!=', ''],\n            'docstatus': ['!=', 2]\n        },\n        fields=[\n            'name', 'check_in_latitude', 'check_in_longitude', 'city',\n            'status', 'visit_type', 'lead_quality', 'potential_value'\n        ]\n    )\n    \n    # Group by approximate location (rounded coordinates)\n    location_groups = {}\n    \n    for visit in visits:\n        # Round coordinates to 2 decimal places for grouping\n        lat_rounded = round(float(visit.check_in_latitude or 0), 2)\n        lng_rounded = round(float(visit.check_in_longitude or 0), 2)\n        location_key = f\"{lat_rounded},{lng_rounded}\"\n        \n        if location_key not in location_groups:\n            location_groups[location_key] = {\n                'lat': lat_rounded,\n                'lng': lng_rounded,\n                'city': visit.city,\n                'visits': [],\n                'total_visits': 0,\n                'completed_visits': 0,\n                'hot_leads': 0,\n                'total_potential_value': 0\n            }\n        \n        group = location_groups[location_key]\n        group['visits'].append(visit.name)\n        group['total_visits'] += 1\n        \n        if visit.status == 'Completed':\n            group['completed_visits'] += 1\n        if visit.lead_quality == 'Hot':\n            group['hot_leads'] += 1\n        if visit.potential_value:\n            group['total_potential_value'] += visit.potential_value\n    \n    return list(location_groups.values())\n\n\n@frappe.whitelist()\ndef export_visit_data(from_date=None, to_date=None, sales_person=None):\n    \"\"\"Export comprehensive visit data for analysis\"\"\"\n    \n    if not from_date:\n        from_date = add_months(getdate(), -1)\n    if not to_date:\n        to_date = getdate()\n    \n    filters = {\n        'visit_date': ['between', [from_date, to_date]],\n        'docstatus': ['!=', 2]\n    }\n    \n    if sales_person:\n        filters['sales_person'] = sales_person\n    \n    visits = frappe.get_all(\n        'CRM Site Visit',\n        filters=filters,\n        fields=[\n            'name', 'visit_date', 'sales_person', 'reference_type', 'reference_name',\n            'reference_title', 'visit_type', 'status', 'priority', 'city', 'state',\n            'visit_purpose', 'visit_summary', 'lead_quality', 'potential_value',\n            'probability_percentage', 'check_in_time', 'check_out_time', 'total_duration',\n            'follow_up_required', 'follow_up_date'\n        ],\n        order_by='visit_date desc'\n    )\n    \n    # Add calculated fields\n    for visit in visits:\n        if visit.total_duration:\n            visit['duration_hours'] = round(visit.total_duration / 3600, 2)\n        else:\n            visit['duration_hours'] = 0\n        \n        visit['week_of_year'] = getdate(visit.visit_date).isocalendar()[1]\n        visit['month'] = getdate(visit.visit_date).strftime('%B %Y')\n    \n    return visits